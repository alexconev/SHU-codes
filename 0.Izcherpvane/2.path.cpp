/*
Робота Пенчо трябвало да се яви на състезание за движение в лабиринт.По правилата на
състезанието всеки робот получава карта къде може да минава и къде не и трябва да стигне
от горния десен ъгъл до долния ляв ъгъл. Понеже процесора му е доста стар, той не може да
открие сам пътя в дадената карта, но може да изпълнява поредица от команди:

	'D' - да върви надолу
	'R' - да върви надясно
	'U' - да върви нагоре
	'L' - да върви наляво

Помогнете на Пенчо като напишете програма, която намира път в зададен лабиринт от горния
десен ъгъл до долния ляв ъгъл и му дава инструкции на къде да се движи.

Вход:
На първи ред едно число 2<N<10 - широчина и дължина на лабиринта, на следващите N реда по N
0-ли или 1-ци. Робота може да се движи по 1-те.

Изход:
На един ред последователност от инструкции (посоки на движение)

Пример #1
	Вход
	5
	10000
	10111
	10101
	11101
	00111

	Изход
	DDDRRDRR

*/
#include <iostream>
#include <cstring>
using namespace std;

int n,br;
char path[10000];
bool a[16][10],v[16][10];

void solve(int i,int j){
	v[i][j] = 1;

	if(i == n-1 && j == n-1){
		for(int i = 0; i < br; i++)
			cout << path[i];
		cout<<endl;
		return;
	}

	if( i+1 < n && !v[i+1][j] && a[i+1][j] ) { path[br] = 'D'; br++; solve(i+1,j); }
	if( j+1 < n && !v[i][j+1] && a[i][j+1] ) { path[br] = 'R'; br++; solve(i,j+1); }
	if( i-1 >= 0 && !v[i-1][j] && a[i-1][j] ) { path[br] = 'U'; br++; solve(i-1,j); }
	if( j-1 >= 0 && !v[i][j-1] && a[i][j-1] ) { path[br] = 'L'; br++; solve(i,j-1); }

	v[i][j] = 0;

	return;
}

int main(){

	char t;
	cin >> n;

	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++){
			cin >> t;
			a[i][j] = t-'0';
		}

	solve(0,0);

	return 0;
}