/*

Дадени са N предмета, i-тият от тях струва ci лева и тежи ai килограма.
Дадените числа са цели и положителни. Разполагаме с раница, в която могат да се
сложат предметите, но не винаги всичките заедно, защото капацитетът на раницата
не позволява общото тегло на поставените в нея предмети да надхвърля дадено цяло
число М. Кои от предметите да изберем за да раницата, така че сумата от стойностите
им да е възможно най-голяма?

Вход
На първия ред на стандартния вход се въвежда числото N, на следващите N реда се
въвждат двойки числа - цена и тегло на поредния продукт. На последния ред на
стандартния вход се въвежда числото M.

Изход
На единствения ред на стандартния изход се извежда максималната сума на стойностите.


Пример #1
	Вход
		3
		6 1
		10 2
		12 3
		5

	Изход
		22




		Предмет	1 	2 	3
		Тегло	1 	2 	3
		Цена	6	10 	12

*/

#include <iostream>
using namespace std;

int n, m;
int c[1024], a[1024], z[1024][1024], w[1024][1024], y[1024][256][1024];

void read(){
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> c[i] >> a[i];

	cin >> m;
}

int use[32];
void solve(int pos)
{
	if(pos == n){
		int temp = 0, temp2 = 0;
		for(int j = 0; j < n; j++){
			temp += c[j] * use[j];
			temp2 += a[j] * use[j];
		}

		if(temp > z[n][m] && temp2 <= m)
			z[n][m] = temp;

		return;
	}

	for(int i = 0; i < 2; i++){
		use[pos] = i;
		solve(pos+1);
	}

	return;
}

void solve2()
{
	int k,t,i,v1,v2,t0;
	k = 1;
	for(t = 0; t <= m; t++){ // Инициализация
		z[k][t] = (a[k] <= t) ? c[k] : 0;
		w[k][t] = (a[k] <= t) ? a[k] : 0;
		y[k][t][k] = (a[k] <= t) ? 1 : 0;
	}

	for(k = 2; k <= n; k++)
		for(t = 0; t <= m; t++){
			v1 = z[k-1][t];
			t0 = t - a[k];
			if(t0 < 0) t0 = 0;
			v2 = c[k] + z[k-1][t0];
			if((v1 < v2) && (a[k] + w[k-1][t0] <= t)){ // = max(z[k-1][t], ck + z[k-1][t-a[k]]);
				z[k][t] = v2;
				w[k][t] = w[k-1][t0] + a[k];
				for(i = 1; i < k; i++)
					y[k][t][i] = y[k-1][t0][i];
				y[k][t][k] = i;
			}
			else{
				z[k][t] = v1;
				w[k][t] = w[k-1][t];
				for(i = 1; i< k; i++)
					y[k][t][i] = y[k-1][t][i];
			}
		}
}

int main(){

	read();
	solve(0);
	//solve2();
	cout << z[n][m] << endl;
	return 0;
}

/*

Допълнителни задачи
1. Да се проследи алгоритъма и да се напишат коментари
2. Да се намери сложността на двата алгоритъма за решаване.
3. Да се отпечатат номерата на продуките, които са взети в раницата.

*/