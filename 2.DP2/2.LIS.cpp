/*
Да се състави програма, която намира дължината на най-дългата растяща
подредица.
Растящата подредица - редица от нарастващи или равни елементи, които са
взети от първоначалната, но не
задължително съседни.

Вход
На първия ред на стандартния вход се въвежда N - броя на елементите на
редицата. На следващия ред
се въвеждат N-те елемента на редицата разделени с интервали.

Изход
На страндартния изход на първия ред се извежда дължината на най-дългата
растяща подредица.

Пример #1
   Вход
   10
   2 5 -2 8 10 5 18 15 22 20

   Изход
   6



   2 5 -2 8 10 5 18 15 22 20
   ^ ^    ^ ^    ^     ^

*/

#include <iostream>
using namespace std;

int arr[1024], lis[1024], n;

int solve()
{
   int max = 0;

   for (int i = 0; i < n; i++ )
      lis[i] = 1;

   for (int i = 1; i < n; i++ )
      for (int j = 0; j < i; j++ )
         if ( arr[i] > arr[j] && lis[i] < lis[j] + 1){
         	lis[i] = lis[j] + 1;
   			if ( max < lis[i] )
         		max = lis[i];
         }

   return max;
}

int main()
{
	cin >> n;
	for(int i = 0; i < n; i++){
		cin >> arr[i];
	}

 	cout << solve() << endl;

	return 0;
}

/*
Домашно:
	1. Какво ще променим, за да търсим намаляваща редица?
	2. Сложност на алгоритъма?
	3. Какво ще допълним, за да отпечатаме числата, участващи в редицата

Отговори:

3.
         int solve()
         {
            int max = 0;
            int pos;

            for (int i = 0; i < n; i++ )
               lis[i] = 1;

            for (int i = 1; i < n; i++ )
               for (int j = 0; j < i; j++ )
                  if ( arr[i] > arr[j] && lis[i] < lis[j] + 1){
                     lis[i] = lis[j] + 1;
                     if ( max < lis[i] ){
                           if(max == 0)
                              pos = j;
                           max = lis[i];
                     }
                  }

            int m = 1, k = arr[pos];
            for(int i = 0; i < n; i++)
               if(m == lis[i] && k <= arr[i])
               {
                  cout << arr[i] << ' ';
                  m++;
                  k = arr[i];
               }
            cout<<endl;

            return max;
         }
*/