Динамичното оптимиране е подход, който се използва за решаване на задачи, които имат оптимална
подструктура. Това означава, че една задача може да се "разбие" на няколко по-малки и решенията
на по-малките задачи да се използват, за да се намери решението на по-голямата. Когато се решава
една такава задача по метода на динамичното оптимиране тя първо се разбива по подходящ начин на
подзадачи. Два основни метода за разбиване са "разделяй и владей" (разделяне на задачата на две
еднакви подзадачи и след това тяхното събиране) и връщане на една стъпка назад (решаване на една
идея по-прости задачи и обединяване на решенията). Тези подзадачи се решават като пак се използва
динамично оптимиране. След това намерените решения се комбинират, за да се получи отговора на
голямата задача. Когато една задача се разбие на подзадачи, тези подзадачи също се разбиват на
по-малки и т.н. В един момент се достига до тривиални задачи отговора, на които лесно може да бъде
намерен. Метода динамично оптимиране може да бъде приложен по два начина - отгоре-надолу и
отдолу-нагоре. Когато е дадена една задача А и отговора за нея може да бъде получен чрез задачи В
и С може рекурсивно да се решат задачите В и С и след това да се обедини отговора за тях. Същото
може да се направи за задачи В и С. Ако този метод се използва директно при задачата за числата на
Фибоначи ще се получи едно много неефктивно решение. Някои от подзадачите ще се пресмятат по няколко
пъти. Ето защо тук е полезно да се използва запаметяване (memoization). Когато в хода на рекурсията
е решена една задача за първи път отговора за нея се запомня и при следващо запитване направо се
използва готовата стойност. По този начин силно се намалява сложността по време на решението. За
сметка на това се използва допълнителна памет. Ето защо при този подход трябва да се направи
компромис между скорост и използвана памет. Този начин на пресмятане на задачите върви отгоре-надолу -
от големите задачи към по-малките. Често такъв вид решение е най-интуитивно за написване. Един
недостатък при него е че не може да позволи прекалено голяма дълбочина на рекурсията заради препълване
на използвания стек. При подхода отдолу-нагоре първо се пресмятат по-малките задачи, след което
изчислените стойности се използват за намиране на отговора за по-големите. Така се избягва
използването на рекурсия, но понякога този вид решения са по-трудни за измисляне. Също така в някои
случаи е възможно да се решават само тези подзадачи, които ще са нужни, а не всички.